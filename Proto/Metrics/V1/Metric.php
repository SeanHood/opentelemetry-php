<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: opentelemetry/proto/metrics/v1/metrics.proto

namespace Opentelemetry\Proto\Metrics\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Defines a Metric which has one or more timeseries.
 * The data model and relation between entities is shown in the
 * diagram below. Here, "DataPoint" is the term used to refer to any
 * one of the specific data point value types, and "points" is the term used
 * to refer to any one of the lists of points contained in the Metric.
 * - Metric is composed of a metadata and data.
 * - Metadata part contains a name, description, unit.
 * - Data is one of the possible types (Gauge, Sum, Histogram, etc.).
 * - DataPoint contains timestamps, labels, and one of the possible value type
 *   fields.
 *     Metric
 *  +------------+
 *  |name        |
 *  |description |
 *  |unit        |     +------------------------------------+
 *  |data        |---> |Gauge, Sum, Histogram, Summary, ... |
 *  +------------+     +------------------------------------+
 *    Data [One of Gauge, Sum, Histogram, Summary, ...]
 *  +-----------+
 *  |...        |  // Metadata about the Data.
 *  |points     |--+
 *  +-----------+  |
 *                 |      +---------------------------+
 *                 |      |DataPoint 1                |
 *                 v      |+------+------+   +------+ |
 *              +-----+   ||label |label |...|label | |
 *              |  1  |-->||value1|value2|...|valueN| |
 *              +-----+   |+------+------+   +------+ |
 *              |  .  |   |+-----+                    |
 *              |  .  |   ||value|                    |
 *              |  .  |   |+-----+                    |
 *              |  .  |   +---------------------------+
 *              |  .  |                   .
 *              |  .  |                   .
 *              |  .  |                   .
 *              |  .  |   +---------------------------+
 *              |  .  |   |DataPoint M                |
 *              +-----+   |+------+------+   +------+ |
 *              |  M  |-->||label |label |...|label | |
 *              +-----+   ||value1|value2|...|valueN| |
 *                        |+------+------+   +------+ |
 *                        |+-----+                    |
 *                        ||value|                    |
 *                        |+-----+                    |
 *                        +---------------------------+
 * All DataPoint types have three common fields:
 * - Labels zero or more key-value pairs associated with the data point.
 * - StartTimeUnixNano MUST be set to the start of the interval when the data's
 *   type includes an AggregationTemporality. This field is not set otherwise.
 * - TimeUnixNano MUST be set to:
 *   - the moment when an aggregation is reported (independent of the
 *     aggregation temporality).
 *   - the instantaneous time of the event.
 *
 * Generated from protobuf message <code>opentelemetry.proto.metrics.v1.Metric</code>
 */
class Metric extends \Google\Protobuf\Internal\Message
{
    /**
     * name of the metric, including its DNS name prefix. It must be unique.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    protected $name = '';
    /**
     * description of the metric, which can be used in documentation.
     *
     * Generated from protobuf field <code>string description = 2;</code>
     */
    protected $description = '';
    /**
     * unit in which the metric value is reported. Follows the format
     * described by http://unitsofmeasure.org/ucum.html.
     *
     * Generated from protobuf field <code>string unit = 3;</code>
     */
    protected $unit = '';
    protected $data;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           name of the metric, including its DNS name prefix. It must be unique.
     *     @type string $description
     *           description of the metric, which can be used in documentation.
     *     @type string $unit
     *           unit in which the metric value is reported. Follows the format
     *           described by http://unitsofmeasure.org/ucum.html.
     *     @type \Opentelemetry\Proto\Metrics\V1\IntGauge $int_gauge
     *     @type \Opentelemetry\Proto\Metrics\V1\DoubleGauge $double_gauge
     *     @type \Opentelemetry\Proto\Metrics\V1\IntSum $int_sum
     *     @type \Opentelemetry\Proto\Metrics\V1\DoubleSum $double_sum
     *     @type \Opentelemetry\Proto\Metrics\V1\IntHistogram $int_histogram
     *     @type \Opentelemetry\Proto\Metrics\V1\DoubleHistogram $double_histogram
     *     @type \Opentelemetry\Proto\Metrics\V1\DoubleSummary $double_summary
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Opentelemetry\Proto\Metrics\V1\Metrics::initOnce();
        parent::__construct($data);
    }

    /**
     * name of the metric, including its DNS name prefix. It must be unique.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * name of the metric, including its DNS name prefix. It must be unique.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * description of the metric, which can be used in documentation.
     *
     * Generated from protobuf field <code>string description = 2;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * description of the metric, which can be used in documentation.
     *
     * Generated from protobuf field <code>string description = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     * unit in which the metric value is reported. Follows the format
     * described by http://unitsofmeasure.org/ucum.html.
     *
     * Generated from protobuf field <code>string unit = 3;</code>
     * @return string
     */
    public function getUnit()
    {
        return $this->unit;
    }

    /**
     * unit in which the metric value is reported. Follows the format
     * described by http://unitsofmeasure.org/ucum.html.
     *
     * Generated from protobuf field <code>string unit = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setUnit($var)
    {
        GPBUtil::checkString($var, True);
        $this->unit = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4;</code>
     * @return \Opentelemetry\Proto\Metrics\V1\IntGauge
     */
    public function getIntGauge()
    {
        return $this->readOneof(4);
    }

    public function hasIntGauge()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4;</code>
     * @param \Opentelemetry\Proto\Metrics\V1\IntGauge $var
     * @return $this
     */
    public function setIntGauge($var)
    {
        GPBUtil::checkMessage($var, \Opentelemetry\Proto\Metrics\V1\IntGauge::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.opentelemetry.proto.metrics.v1.DoubleGauge double_gauge = 5;</code>
     * @return \Opentelemetry\Proto\Metrics\V1\DoubleGauge
     */
    public function getDoubleGauge()
    {
        return $this->readOneof(5);
    }

    public function hasDoubleGauge()
    {
        return $this->hasOneof(5);
    }

    /**
     * Generated from protobuf field <code>.opentelemetry.proto.metrics.v1.DoubleGauge double_gauge = 5;</code>
     * @param \Opentelemetry\Proto\Metrics\V1\DoubleGauge $var
     * @return $this
     */
    public function setDoubleGauge($var)
    {
        GPBUtil::checkMessage($var, \Opentelemetry\Proto\Metrics\V1\DoubleGauge::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.opentelemetry.proto.metrics.v1.IntSum int_sum = 6;</code>
     * @return \Opentelemetry\Proto\Metrics\V1\IntSum
     */
    public function getIntSum()
    {
        return $this->readOneof(6);
    }

    public function hasIntSum()
    {
        return $this->hasOneof(6);
    }

    /**
     * Generated from protobuf field <code>.opentelemetry.proto.metrics.v1.IntSum int_sum = 6;</code>
     * @param \Opentelemetry\Proto\Metrics\V1\IntSum $var
     * @return $this
     */
    public function setIntSum($var)
    {
        GPBUtil::checkMessage($var, \Opentelemetry\Proto\Metrics\V1\IntSum::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.opentelemetry.proto.metrics.v1.DoubleSum double_sum = 7;</code>
     * @return \Opentelemetry\Proto\Metrics\V1\DoubleSum
     */
    public function getDoubleSum()
    {
        return $this->readOneof(7);
    }

    public function hasDoubleSum()
    {
        return $this->hasOneof(7);
    }

    /**
     * Generated from protobuf field <code>.opentelemetry.proto.metrics.v1.DoubleSum double_sum = 7;</code>
     * @param \Opentelemetry\Proto\Metrics\V1\DoubleSum $var
     * @return $this
     */
    public function setDoubleSum($var)
    {
        GPBUtil::checkMessage($var, \Opentelemetry\Proto\Metrics\V1\DoubleSum::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8;</code>
     * @return \Opentelemetry\Proto\Metrics\V1\IntHistogram
     */
    public function getIntHistogram()
    {
        return $this->readOneof(8);
    }

    public function hasIntHistogram()
    {
        return $this->hasOneof(8);
    }

    /**
     * Generated from protobuf field <code>.opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8;</code>
     * @param \Opentelemetry\Proto\Metrics\V1\IntHistogram $var
     * @return $this
     */
    public function setIntHistogram($var)
    {
        GPBUtil::checkMessage($var, \Opentelemetry\Proto\Metrics\V1\IntHistogram::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.opentelemetry.proto.metrics.v1.DoubleHistogram double_histogram = 9;</code>
     * @return \Opentelemetry\Proto\Metrics\V1\DoubleHistogram
     */
    public function getDoubleHistogram()
    {
        return $this->readOneof(9);
    }

    public function hasDoubleHistogram()
    {
        return $this->hasOneof(9);
    }

    /**
     * Generated from protobuf field <code>.opentelemetry.proto.metrics.v1.DoubleHistogram double_histogram = 9;</code>
     * @param \Opentelemetry\Proto\Metrics\V1\DoubleHistogram $var
     * @return $this
     */
    public function setDoubleHistogram($var)
    {
        GPBUtil::checkMessage($var, \Opentelemetry\Proto\Metrics\V1\DoubleHistogram::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.opentelemetry.proto.metrics.v1.DoubleSummary double_summary = 11;</code>
     * @return \Opentelemetry\Proto\Metrics\V1\DoubleSummary
     */
    public function getDoubleSummary()
    {
        return $this->readOneof(11);
    }

    public function hasDoubleSummary()
    {
        return $this->hasOneof(11);
    }

    /**
     * Generated from protobuf field <code>.opentelemetry.proto.metrics.v1.DoubleSummary double_summary = 11;</code>
     * @param \Opentelemetry\Proto\Metrics\V1\DoubleSummary $var
     * @return $this
     */
    public function setDoubleSummary($var)
    {
        GPBUtil::checkMessage($var, \Opentelemetry\Proto\Metrics\V1\DoubleSummary::class);
        $this->writeOneof(11, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getData()
    {
        return $this->whichOneof("data");
    }

}

